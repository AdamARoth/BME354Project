/* Controlling the state of the heater based on current temperature
CREATED BY ADAM ROTH, KAVITHA PRASANNA, ALEXA CHOY, TYLER HOBBS
*/

// include the library code:
#include <LiquidCrystal.h>

#define btnRIGHT 0
#define btnUP 1
#define btnDOWN 2
#define btnLEFT 3
#define btnSELECT 4
#define btnNONE 5
#define V1 95
#define V2 144
#define V3 329
#define V4 504
#define V5 741
#define VNONE 1000
int sensePin = 0;
int lcd_key = 0;
int adc_key_in = 0;
int buttonDelayTime = 75;
boolean btnUpAgn = false;
boolean btnDownAgn = false;
boolean btnSelAgn = false;
boolean btnRightAgn = false;
boolean optionsMode = false;
boolean setMode = false;

// initialize the library and select the pins used on the LCD panel
LiquidCrystal lcd(8, 9, 4, 5, 6, 7);

// define some values used by the panel
int setPoint = 120;
int maxPoint = 275;
int minPoint = 80;
int warnPoint = 250;
int possibleTemp = setPoint;
int heaterPin = 13;
int index = 0;
float curTemp;

// read the buttons
int read_LCD_buttons()
{
  adc_key_in = analogRead(0); // read the value from the sensor
    // my buttons when read are centered at these valies: 0, 144, 329, 504, 741
    // we add approx 50 to those values and check to see if we are close
  if (adc_key_in > VNONE) return btnNONE;
  else if (adc_key_in < V1) return btnRIGHT;
  else if (adc_key_in < V2) return btnUP;
  else if (adc_key_in < V3) return btnDOWN;
  else if (adc_key_in < V4) return btnLEFT;
  else if (adc_key_in < V5) return btnSELECT;
  return btnNONE; // when all others fail, return this...
}
void startUpMessage()
{
  lcd.setCursor(0,0);
  lcd.print("POWER ON");
  delay(1000);
  lcd.setCursor(0,0);
  lcd.print("WELCOME TO THE");
  lcd.setCursor(0,1);
  lcd.print("KAAT SOLDER OVEN");
  delay(2000);
  lcd.setCursor(0,0);
  lcd.print("THE LATEST FROM ");
  lcd.setCursor(0,1);
  lcd.print("KAAT INDUSTRIES ");
  delay(2000);  
  lcd.setCursor(0,0);
  lcd.print("   LLC, N. A.   ");
  lcd.setCursor(0,1);
  lcd.print("Patent Pending  ");
  delay(2000); 
  lcd.setCursor(0,0);
  lcd.print("Press Right For ");
  lcd.setCursor(0,1);
  lcd.print("Options Menu    ");
  delay(2000);
}
void setup()
{
  Serial.begin(9600);
  lcd.begin(16, 2); // start the library
  startUpMessage();
}
void loop()
{
  lcd_key = read_LCD_buttons();
  if(!optionsMode)
  {
    switch(lcd_key)
     {
         case btnDOWN:
         {
           break;
         }
         case btnUP:
         {
           break;
         }
         case btnSELECT:
         {
           break;
         }
         case btnLEFT:
         {
           break;
         }
         case btnRIGHT:
         {
           if(btnRightAgn)
           {
             optionsMode = true;
             btnRightAgn = false;
           }
           else
           {
             btnRightAgn = true;
           }
           delay(2*buttonDelayTime);
           break;
         }
         case btnNONE:
         {
           if(setMode)
           {
             tempSelect();
           }
           else
           {
             heatControl();
           }
         }
   }
  }
  else
  {
    optionsMenu();
  }
}
void heatControl()
{
   int val=analogRead(sensePin);
   curTemp = val / 0.005;
   if (curTemp >= warnPoint && curTemp < maxPoint)
   {
      lcd.setCursor(0,0);
      lcd.print("!WARNING!      ") ;  
      lcd.setCursor(0,1);
      lcd.print("!TEMP TOO HIGH!");
   }
   else if (curTemp >= maxPoint)
   {
      digitalWrite(heaterPin,LOW);
      lcd.setCursor(0,0);
      lcd.print("!HEATER OFF!    ");
      lcd.setCursor(0,1);
      lcd.print("!TEMP TOO HIGH! ");
      delay(2000);
   }
   if (curTemp < setPoint)
   {
     digitalWrite(heaterPin, HIGH);
   }
   else
   {
     digitalWrite(heaterPin, LOW); 
   }
   displayTemp();
   delay(2000);
}
void tempSelect()
{
    lcd.setCursor(0,0);
    lcd.print("Edit Set Point  ");
    lcd.setCursor(0,1);
    String temp = "";
    temp.concat(possibleTemp);
    temp.concat(" Deg C        ");
    lcd.print(temp);
    lcd_key = read_LCD_buttons();
   switch(lcd_key)
   {
     case btnDOWN:
     {
       if(btnDownAgn)
       {
         possibleTemp = possibleTemp - 1;
         btnDownAgn = false;
       }
       else
       {
         btnDownAgn = true;
       }
       delay(buttonDelayTime);
       break;
     }
     case btnUP:
     {
       if(btnUpAgn)
       {
         possibleTemp = possibleTemp + 1;
         btnUpAgn = false;
       }
       else
       {
         btnUpAgn = true;
       }
       delay(buttonDelayTime);
       break;
     }
     case btnSELECT:
     {
       if(btnSelAgn)
       {
         if(possibleTemp > warnPoint)
         {
           lcd.setCursor(0,0);
           lcd.print("Temp Too High!  ");
           lcd.setCursor(0,1);
           lcd.print("Please Set Lower");
           delay(3000);
           possibleTemp = warnPoint;
         }
         else if(possibleTemp < minPoint)
         {
           lcd.setCursor(0,0);
           lcd.print("Temp Too Low!    ");
           lcd.setCursor(0,1);
           lcd.print("Please Set Higher");
           delay(3000);
           possibleTemp = minPoint;
         }  
         else
         {
           setPoint = possibleTemp;
           lcd.setCursor(0,0);
           lcd.print("New Set Point");
           lcd.setCursor(0,1);
           lcd.print("Temp:  ");
           lcd.print(setPoint);
           lcd.print(" Deg C");
           setMode = false;
         }
         btnSelAgn = false;
       }
       else
       {
         btnSelAgn = true;
       }
       delay(10*buttonDelayTime);
       break;
     }
     case btnLEFT:
     {
       break;
     }
     case btnRIGHT:
     {
       break;
     }
     case btnNONE:
     {
        break;
        lcd.clear();
     }
}
}
void displayTemp()
{
  lcd.setCursor(0,0);
  lcd.print("Cur Temp: ");
  lcd.print(curTemp);
  lcd.print(" C      ");
  lcd.setCursor(0,1);
  lcd.print("Set Temp: ");
  lcd.print(setPoint);
  lcd.print(" C      ");
}
void optionsMenu()
{ 
  char* options[] = {
    "Temp Select    ",
    "Run Reflow     ",
    "Print Data     "};
  int optionsSize = 3;
  lcd_key = read_LCD_buttons();
  switch(lcd_key)
   {
     case btnDOWN:
     {
       if(btnDownAgn)
       {
         index = index + 1;
         if(index >= optionsSize)
         {
             index = 0;
         }
         btnDownAgn = false;
       }
       else
       {
         btnDownAgn = true;
       }
       delay(buttonDelayTime);
       break;
     }
     case btnUP:
     {
       if(btnUpAgn)
       {
         index = index - 1;
         if(index < 0)
         {
           index = optionsSize - 1;
         }
         btnUpAgn = false;
       }
       else
       {
         btnUpAgn = true;
       }
       delay(buttonDelayTime);
       break;
     }
     case btnSELECT:
     {
       if(btnSelAgn)
       {
         btnSelAgn = false;
         if(index == 0)
         {
           setMode = true;
         }
         optionsMode = false;
       }
       else
       {
         btnSelAgn = true;
       }
       delay(10*buttonDelayTime);
       break;
     }
     case btnLEFT:
     {
       break;
     }
     case btnRIGHT:
     {
       break;
     }
     case btnNONE:
     {
         lcd.setCursor(0,0);
         lcd.print("Select a Mode   ");
         lcd.setCursor(0,1);
         lcd.print(options[index]);
         break;
     }
}
}


