/* LCD Tutorial Objective 3: BUTTON VOLTAGES TO LCD screen
Created by KAVITHA PRASANNA, ALEXA CHOY, ADAM ROTH, TYLER HOBBS
*/
// include the library code:
#include <LiquidCrystal.h>

// initialize the library with the numbers of the interface pins
LiquidCrystal lcd(8, 9, 4, 5, 6, 7);

// define some values used by the panel and buttons
int lcd_key = 0;
int adc_key_in = 0;
int sensePin = 0;
int ledPin = 9;
#define btnRIGHT 0
#define btnUP 1
#define btnDOWN 2
#define btnLEFT 3
#define btnSELECT 4
#define btnNONE 5
#define V1 0
#define V2 144
#define V3 329
#define V4 504
#define V5 741
#define VNONE 1000

// read the buttons
int read_LCD_buttons()
{
  adc_key_in = analogRead(0);   // read the value from the sensor
  // my buttons when read are centered at these valies: 0, 144, 329, 504, 741
  // we add approx 50 to those values and check to see if we are close
  if (adc_key_in > VNONE) return btnNONE; // We make this the 1st option for speed reasons since if (adc_key_in < V1) return btnRIGHT;
  if (adc_key_in < V2) return btnUP;
  if (adc_key_in < V3) return btnDOWN;
  if (adc_key_in < V4) return btnLEFT;
  if (adc_key_in < V5) return btnSELECT;
  return btnNONE;   // when all others fail, return this...
}

void setup()
{
  lcd.begin(16, 2);   // start the library (LCD screen)
}

void loop()
{
  lcd_key = read_LCD_buttons();   // read the buttons
 
  switch (lcd_key)    // depending on which button was pushed, we perform an action
  {
    case btnRIGHT:
        {
        lcd.clear();                    // clear the LCD screen
        lcd.setCursor(0,0);             // set the cursor
        int val=analogRead(sensePin);   // read the Pin value to an int variable "val"
        String output = "";             // create the empty string to store val
        output.concat(val);             // output val to the "output" string
        lcd.print(output);              // print the value to the LCD screen
        delay(200);                     // delay enough time
        break;                          // break out of case structure
        }
        
    case btnLEFT:
        {
        lcd.clear();
        lcd.setCursor(0,0);
        int val=analogRead(sensePin);
        String output = "";
        output.concat(val);
        lcd.print(output);
        delay(200);
        break;
        }
        
    case btnUP:
        {
        lcd.clear();
        lcd.setCursor(0,0);
        int val=analogRead(sensePin);
        String output = "";
        output.concat(val);
        lcd.print(output);
        delay(200);
        break;
        }
        
    case btnDOWN:
        {
        lcd.clear();
        lcd.setCursor(0,0);
        int val=analogRead(sensePin);
        String output = "";
        output.concat(val);
        lcd.print(output);
        delay(200);
        break;
        }
        
    case btnSELECT:
        {
        lcd.clear();
        lcd.setCursor(0,0);
        int val=analogRead(sensePin);
        String output = "";
        output.concat(val);
        lcd.print(output);
        delay(200);
        break;
        }
        
    case btnNONE:
        {
        lcd.clear();
        lcd.setCursor(0,0);
        int val=analogRead(sensePin);
        String output = "";
        output.concat(val);
        lcd.print(output);
        delay(200);
        break;
        }
  }
}
