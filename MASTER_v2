
/* Controlling the state of the heater based on current temperature
 CREATED BY ADAM ROTH, KAVITHA PRASANNA, ALEXA CHOY, TYLER HOBBS
 */

// include the library code:
#include <LiquidCrystal.h>
#include <TempContDisp.h>
#include <PIDControl.h>
#include <PID_v1.h>

#define btnRIGHT 0
#define btnUP 1
#define btnDOWN 2
#define btnLEFT 3
#define btnSELECT 4
#define btnNONE 5
#define V1 95
#define V2 144
#define V3 329
#define V4 504
#define V5 741
#define VNONE 1000
#define optionsSize 4
#define minPoint 80
#define heaterPin 2
#define sensePin 5
#define debounceDelay 70
#define variablesSize 6

int lcd_key = 0;
int adc_key_in = 0;
long lastDebounceTime = 0;
boolean optionsMode = false;
boolean setMode = false;
boolean reflowMode = false;
double currTemp;
double setTempPoint;
double setTimePoint;
int kp = 2;
int ki = 0.1;
int kd = 5;
double Output;
unsigned long windowStartTime;

//Define Min/Max Set Temp
int minSetPoint = 80;
int maxSetPoint = 250;

//Define Reflow Points
int timePt1 = 30;
int timePt2 = 60;
int timePt3 = 120;
int tempPt1 = 150;
int tempPt2 = 150;
int tempPt3 = 217;

// initialize the library and select the pins used on the LCD panel
LiquidCrystal lcd(8, 9, 4, 5, 6, 7);
//TempContDisp tempcontdisp(sensePin, setPoint, curTemp);
PID myPID(&currTemp, &Output, &setTempPoint, kp, ki, kd, DIRECT);
PIDControl pid(setTempPoint,setTimePoint, currTemp, Output, kp, ki, kd, windowStartTime,tempPt1,tempPt2,tempPt3,timePt1,timePt2,timePt3);

// define some values used by the panel
int index = 0;

void setup()
{
  Serial.begin(9600);
  lcd.begin(16, 2); // start the library
  pinMode(heaterPin,OUTPUT);
  //startUpMessage();
}
void loop()
{
  if(!optionsMode && !setMode && !reflowMode)
  {
    lcd.clear();
    lcd_key = read_LCD_buttons();
    switch(lcd_key)
    {
    case btnRIGHT:
      {
        optionsMode = true;
        break;
      }
    case btnNONE:
      {
          break;
      }
    case btnSELECT:
      {
        windowStartTime = millis();
        reflowMode = true;
      }
    default:
      {
        break;
      }
    }
  }
  else if (setMode)
  {
    setReflowPoints();
  }
   else if (reflowMode)
  {
    pid.optionsPID(setTimePoint);
    double setTempPoint = pid.setReflowCurve(tempPt1,tempPt2,tempPt3,timePt1,timePt2,timePt3,setTempPoint,setTimePoint,windowStartTime);
    double setTimePoint = pid.setReflowTime(tempPt1,tempPt2,tempPt3,timePt1,timePt2,timePt3,setTempPoint,setTimePoint,windowStartTime);
    pid.reflowPID(setTempPoint,setTimePoint, currTemp, Output, kp, ki, kd);
    //Serial.println(Output);
    }
  else
  {
    optionsMenu();
  }
}
