/* Controlling the state of the heater based on current temperature
 CREATED BY ADAM ROTH, KAVITHA PRASANNA, ALEXA CHOY, TYLER HOBBS
 */

// include the library code:
#include <LiquidCrystal.h>
#include <TempContDisp.h>
#include <PIDControl.h>
#include <PID_v1.h>
#include <EEPROM.h>

#define btnRIGHT 0
#define btnUP 1
#define btnDOWN 2
#define btnLEFT 3
#define btnSELECT 4
#define btnNONE 5
#define V1 95
#define V2 144
#define V3 329
#define V4 504
#define V5 741
#define VNONE 1000
#define optionsSize 6
#define minPoint 80
#define heaterPin 2
#define sensePin 5
#define debounceDelay 70
#define variablesSize 6

int lcd_key = 0;
int adc_key_in = 0;
long lastDebounceTime = 0;
boolean optionsMode = false;
boolean setMode = false;
boolean reflowMode = false;
double currentTemp;
double setTemp;
double setTime;
int kpC = 2;
int kiC = 0.1;
int kdC = 5;
double PIDOutput;
unsigned long windowStartTime;

//Define Min/Max Set Temp
int minSetPoint = 80;
int maxSetPoint = 250;

//Define Reflow Points
int timePt1 = 30;
int timePt2 = 60;
int timePt3 = 120;
int tempPt1 = 150;
int tempPt2 = 150;
int tempPt3 = 217;

//Initialize Max Peak as 0 before run occurs
int maxPk = 200;

// initialize the library and select the pins used on the LCD panel
LiquidCrystal lcd(8, 9, 4, 5, 6, 7);
//TempContDisp tempcontdisp(sensePin, setPoint, curTemp);
//PIDControl pid(setTemp,setTime, currentTemp, windowStartTime,tempPt1,tempPt2,tempPt3,timePt1,timePt2,timePt3);

// define some values used by the panel
int index = 0;

void setup()
{
  Serial.begin(9600);
  lcd.begin(16, 2); // start the library
  pinMode(heaterPin,OUTPUT);
  //Check if defaults are saved in device
  if(EEPROM.read(6) == 1)
  {
    timePt1 = (int) EEPROM.read(0);
    timePt2 = (int) (timePt1 + EEPROM.read(1));
    timePt3 = (int) (timePt2 + EEPROM.read(2));
    tempPt1 = (int) EEPROM.read(3);
    tempPt2 = (int) EEPROM.read(4);
    tempPt3 = (int) EEPROM.read(5);
  }
  //startUpMessage();
}
void loop()
{
  if(!optionsMode && !setMode && !reflowMode)
  {
    lcd.clear();
    lcd_key = read_LCD_buttons();
    switch(lcd_key)
    {
    case btnRIGHT:
      {
        optionsMode = true;
        break;
      }
    case btnNONE:
      {
          break;
      }
    case btnSELECT:
      {
        windowStartTime = millis();
        reflowMode = true;
      }
    default:
      {
        break;
      }
    }
  }
  else if (setMode)
  {
    setReflowPoints();
  }
   else if (reflowMode)
  {
    //pid.optionsPID(setTime);
    //setTemp = pid.setReflowCurve(tempPt1,tempPt2,tempPt3,timePt1,timePt2,timePt3,setTemp,setTime,windowStartTime);
    //Serial.println(setTemp);
    //setTime = pid.setReflowTime(tempPt1,tempPt2,tempPt3,timePt1,timePt2,timePt3,setTemp,setTime,windowStartTime);
   
   //Serial.println(PIDOutput);
    //PIDOutput = pid.reflowPID(setTemp,setTime, windowStartTime);
    //Serial.println(PIDOutput);
    }
  else
  {
    optionsMenu();
  }
}

void optionsMenu()
{ 
  String options[optionsSize] = {
    "Set Reflow Pts",
    "Run Reflow",
    "Print Data",
    "Display Stats",
    "Save New Default",
    "Restore Settings"    };
  lcd_key = read_LCD_buttons();
  switch(lcd_key)
  {
  case btnDOWN:
    {
      index = index + 1;
      if(index >= optionsSize)
      {
        index = 0;
      } 
      lcd.clear();     
      break;
    }
  case btnUP:
    {
      index = index - 1;
      if(index < 0)
      {
        index = optionsSize - 1;
      }
      lcd.clear();
      break;
    }
  case btnSELECT:
    {
      if(index == 0)
      {
        setMode = true;
      }
      else if(index == 3)
      {
        displayStats();
      }
      else if(index == 4)
      {
        checkNewDefault();
      }
      else if(index == 5)
      {
        restoreDefaultSettings();
      }
      optionsMode = false;
      break;
    }
  case btnNONE:
    {
      lcd.setCursor(0,0);
      lcd.print("Select a Mode");
      lcd.setCursor(0,1);
      lcd.print(options[index]);
      break;
    }
  default:
    {
      break;
    }
  }
}

int read_LCD_buttons()
{
  int run1 = read_LCD_buttonsHelp();
  if(run1 != btnNONE)
  {
    delay(debounceDelay);
    int run2 = read_LCD_buttonsHelp();
    if(run2 > (run1 - 25) && run2 < (run1 + 25))
    {
      return run2;    
    }
  }
}

int read_LCD_buttonsHelp()
{
  int adc_key_in = analogRead(0);
  if (adc_key_in > VNONE) return btnNONE;
  else if (adc_key_in < V1) return btnRIGHT;
  else if (adc_key_in < V2) return btnUP;
  else if (adc_key_in < V3) return btnDOWN;
  else if (adc_key_in < V4) return btnLEFT;
  else if (adc_key_in < V5) return btnSELECT;
  return btnNONE; 
}

void setReflowPoints()
{
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Entering");
  lcd.setCursor(0,1);
  lcd.print("Set Mode");
  delay(1000);  // Done to avoid entering select case too quickly
  lcd.clear();
  boolean select = true;
  int index = 0;
  int tempTime1 = timePt1; 
  int tempTime2 = timePt2;
  int tempTime3 = timePt3;
  int tempTemp1 = tempPt1;
  int tempTemp2 = tempPt2;
  int tempTemp3 = tempPt3;

  while(select)
  {
    int lcd_key = read_LCD_buttons();
    switch (lcd_key)
    {
    case btnLEFT: //switch to previous mode
      {
        index=index-1;
        if(index < 0)
        {
          index= variablesSize - 1;
        }
        lcd.clear();
        break;
      }
    case btnRIGHT: //switch to next mode
      {  
        index=index+1;
        if(index >= variablesSize)
        {
          index=0;
        }
        lcd.clear();
        break;
      }
    case btnUP:     //increment up
      {
        if(index == 0)
        {
          lcd.clear();
          tempTime1 = tempTime1+1;
          printReflowPoint(1,tempTime1,tempTemp1,0);
        }
        else if(index == 1)
        {
          lcd.clear();
          tempTemp1 = tempTemp1+1;
          printReflowPoint(1,tempTime1,tempTemp1,1);
        }
        else if(index == 2)
        {
          lcd.clear();
          tempTime2 = tempTime2+1;
          printReflowPoint(2,tempTime2,tempTemp2,0);
        }
        else if(index == 3)
        {
          lcd.clear();
          tempTemp2 = tempTemp2+1;
          printReflowPoint(2,tempTime2,tempTemp2,1);
        }
        else if(index == 4)
        {
          lcd.clear();
          tempTime3 = tempTime3+1;
          printReflowPoint(3,tempTime3,tempTemp3,0);            
        }
        else 
        {
          lcd.clear();
          tempTemp3 = tempTemp3+1;
          printReflowPoint(3,tempTime3,tempTemp3,1);
        }
        break;
      }
    case btnDOWN:    //increment down
      {
        if(index == 0)
        {
          lcd.clear();
          tempTime1 = tempTime1-1;
          if(tempTime1 < 0)
          {
            tempTime1 = 0;
          }
          printReflowPoint(1,tempTime1,tempTemp1,0);
        }
        else if(index == 1)
        {
          lcd.clear();
          tempTemp1 = tempTemp1-1;
          printReflowPoint(1,tempTime1,tempTemp1,1);
        }
        else if(index == 2)
        {
          lcd.clear();
          tempTime2 = tempTime2-1;
          if(tempTime2 < tempTime1+1)
          {
            tempTime2 = tempTime1+1;
          }
          printReflowPoint(2,tempTime2,tempTemp2,0);
        }
        else if(index == 3)
        {
          lcd.clear();
          tempTemp2 = tempTemp2-1;
          printReflowPoint(2,tempTime2,tempTemp2,1);
        }
        else if(index == 4)
        {
          lcd.clear();
          tempTime3 = tempTime3-1;
          if(tempTime3 < tempTime2+1)
          {
            tempTime3 = tempTime2+1;
          }
          printReflowPoint(3,tempTime3,tempTemp3,0);
        }
        else 
        {
          lcd.clear();
          tempTemp3 = tempTemp3-1;
          printReflowPoint(3,tempTime3,tempTemp3,1);
        }
        break;
      }
    case btnSELECT:  //enter and continue
      {
        if(tempCheck(tempTemp1,1) && tempCheck(tempTemp2,2) && tempCheck(tempTemp3,3))
        {
          if(verifySelection())
          {
            timePt1 = tempTime1;
            timePt2 = tempTime2;
            timePt3 = tempTime3;
            tempPt1 = tempTemp1;
            tempPt2 = tempTemp2;
            tempPt3 = tempTemp3;
            select = false;
            setMode = false;
          }
        } 
        break;
      }

    case btnNONE:    // The location where functions are executed
      {
        if(tempTime2 < tempTime1+1)
        {
          tempTime2 = tempTime1+1;
        }
        if(tempTime3 < tempTime2+1)
        {
          tempTime3 = tempTime2+1;
        }
        if(index == 0)
        {
          printReflowPoint(1,tempTime1,tempTemp1,0);
        }
        else if(index == 1)
        {
          printReflowPoint(1,tempTime1,tempTemp1,1);
        }
        else if(index == 2)
        {
          printReflowPoint(2,tempTime2,tempTemp2,0);
        }
        else if(index == 3)
        {
          printReflowPoint(2,tempTime2,tempTemp2,1);
        }
        else if(index == 4)
        {
          printReflowPoint(3,tempTime3,tempTemp3,0);
        }
        else
        {
          printReflowPoint(3,tempTime3,tempTemp3,1);
        }
        break;
      }
    }
  }
}

boolean tempCheck(int possibleTemp, int dataSet)
{
  if(possibleTemp > maxSetPoint)
  {
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Temp ");
    lcd.print(dataSet);
    lcd.print(" Too High!");
    lcd.setCursor(0,1);
    lcd.print("Please Set Lower");
    delay(3000);
    possibleTemp = maxSetPoint;
    return false;
  }
  else if(possibleTemp < minSetPoint)
  {
    lcd.setCursor(0,0);
    lcd.print("Temp ");
    lcd.print(dataSet); 
    lcd.print(" Too Low!");
    lcd.setCursor(0,1);
    lcd.print("Please Set Higher");
    delay(3000);
    possibleTemp = minSetPoint;
    return false;
  }  
  return true;
}

boolean verifySelection()
{
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Change Set");
  lcd.setCursor(0,1);
  lcd.print("Points?");
  delay(2000);
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Press SEL");
  lcd.setCursor(0,1);
  lcd.print("To Verify");
  boolean notVerified = true;
  while(notVerified)
  {
    int check = read_LCD_buttons();
    switch(check)
    {
      case(btnSELECT):
      {
        return true;
        break;
      }
      case(btnNONE):
      {
        break;
      }
    default:
      {
        return false;
      }
    }
  }
}

void printReflowPoint(int dataSet,int time, int temp, int change) 
{  
   String output = "";
   lcd.setCursor(0,0);
   output.concat("Time Pt ");
   output.concat(dataSet);
   output.concat(" ");
   if(change == 0) // Adds * to variable if being changed (0 if time, 1 if temp )
   {
     output.concat("*");
   }
   int timeMin = time/60;
   int timeSec = time%60;
   //Add zero to single digit of min
    if(timeMin < 10)
    {
      output.concat("0"); 
    }
    output.concat(timeMin);
    output.concat(":");
    //Add zero to single digit of sec
    if(timeSec < 10)
    {
      output.concat("0");
    }
    output.concat(timeSec);
    lcd.print(output);
    lcd.setCursor(0,1);
    String output2 = "";
    output2.concat("Temp Pt ");
    output2.concat(dataSet);
    output2.concat(" ");
    if(change == 1)
    {
       output2.concat("*");
    }
    output2.concat(temp);
    output2.concat(" C ");
    lcd.print(output2);
}

void startUpMessage()
{
  lcd.setCursor(0,0);
  lcd.print("POWER ON");
  delay(1000);
  lcd.setCursor(0,0);
  lcd.print("WELCOME TO THE");
  lcd.setCursor(0,1);
  lcd.print("KAAT SOLDER OVEN");
  delay(2000);
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("THE LATEST FROM");
  lcd.setCursor(0,1);
  lcd.print("KAAT INDUSTRIES");
  delay(2000);  
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("LLC, N. A.");
  lcd.setCursor(0,1);
  lcd.print("Patent Pending");
  delay(2000);
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Press Right For");
  lcd.setCursor(0,1);
  lcd.print("Options Menu");
  delay(5000);
  lcd.clear();
}
void updatePIDInfo()
{
  lcd.clear();
  lcd.setCursor(0,0);
  String output = "";
}
void saveNewDefaultData()
{
  //Designed to only accept bytes as acceptable setpoints given range of data
  //This is fine given the system only allows the user to change the temp range 
  //by a given amount
  //Writing to address 0 (Time Pt 1)
  EEPROM.write(0,(byte)timePt1);
  //Writing to address 1 (Time Pt 2 - Time Pt 1)
  EEPROM.write(1,(byte)(timePt2-timePt1));
  //Writing to address 2 (Time Pt 3 - Time Pt 2)
  EEPROM.write(2,(byte)(timePt3-timePt2));
  //Writing to address 3/4/5 (Temp Pt 1/2/3)
  EEPROM.write(3,(byte)tempPt1);
  EEPROM.write(4,(byte)tempPt2);
  EEPROM.write(5,(byte)tempPt3);
  //Indicator to tell if defaults ave been changed
  EEPROM.write(6,(byte)1);
}
void checkNewDefault()
{
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Change Default?");
  lcd.setCursor(0,1);
  lcd.print("Press SEL if Y");
  boolean run = true;
  while(run)
  {
    boolean check = read_LCD_buttons();
    switch(check)
    {
        case(btnSELECT):
        {
          run = false;
          saveNewDefaultData();
          break;
        }
        case(btnNONE):
        {
          break;
        }
      default:
        {
          run = false;
        }
      }
  }
}
void restoreDefaultSettings()
{
  //Restore Default Reflow Points
    timePt1 = 30;
    timePt2 = 60;
    timePt3 = 120;
    tempPt1 = 150;
    tempPt2 = 150;
    tempPt3 = 217;
    saveNewDefaultData();
}
void displayStats()
{
  //Displays Stats
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Entering");
  lcd.setCursor(0,1);
  lcd.print("Stats Mode");
  delay(1000);
  if(maxPk == 0)
  {
    
    lcd.setCursor(0,0);
    lcd.print("Previous Run");
    lcd.setCursor(0,1);
    lcd.print("Not Detected");
    delay(1000);
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Stats Cannot");
    lcd.setCursor(0,1);
    lcd.print("Be Generated");
    delay(1000);
  }
  else
  {
    float percentErr= abs((((float)maxPk-(float)tempPt3)/((float)tempPt3))*100);
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Desired Pk ");
    lcd.print(tempPt3);
    
    lcd.setCursor(0,1);
    lcd.print("Pk ");
    lcd.print(maxPk);
    
    lcd.setCursor(7,1);
    lcd.print("Err ");
    lcd.print((int)percentErr); //Rounds error to an int to allow display of percent sign
    lcd.print("%");
    delay(500);
    int startLoopTime = millis();
    boolean run = true;
    while(run)
    {
      lcd_key = read_LCD_buttons();
      switch(lcd_key)
      {
      case btnNONE:
        {
            if(millis()-startLoopTime >= 10000)
            {
              run = false;
            }
            break;
        }
      case btnSELECT:
        {
           run = false;
           break;
        }
      }
    }
  }
}
