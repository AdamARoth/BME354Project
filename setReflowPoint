
/* Controlling the state of the heater based on current temperature
 CREATED BY ADAM ROTH, KAVITHA PRASANNA, ALEXA CHOY, TYLER HOBBS
*/

// include the library code:
#include <LiquidCrystal.h>
#include <TempContDisp.h>

#define btnRIGHT 0
#define btnUP 1
#define btnDOWN 2
#define btnLEFT 3
#define btnSELECT 4
#define btnNONE 5
#define V1 95
#define V2 144
#define V3 329
#define V4 504
#define V5 741
#define VNONE 1000
#define optionsSize 4
//#define buttonDelayTime 50
#define minPoint 80
#define heaterPin 2
#define sensePin 5
#define debounceDelay 100

int lcd_key = 0;
int adc_key_in = 0;
long lastDebounceTime = 0;
boolean optionsMode = false;
boolean setMode = false;
float curTemp;
int setPoint = 120;

// initialize the library and select the pins used on the LCD panel
LiquidCrystal lcd(8, 9, 4, 5, 6, 7);
//TempContDisp tempcontdisp(sensePin, setPoint, curTemp);

// define some values used by the panel
int possibleTemp = setPoint;
int index = 0;

void setup()
{
  Serial.begin(9600);
  lcd.begin(16, 2); // start the library
  pinMode(heaterPin,OUTPUT);
  //startUpMessage();
}
void loop()
{
  lcd_key = read_LCD_buttons();
  if(!optionsMode && !setMode)
  {
    lcd_key = read_LCD_buttons();
    switch(lcd_key)
    {
    case btnRIGHT:
      {
        optionsMode = true;
        break;
      }
    case btnNONE:
      {
        if(setMode)
        {
          //tempSelect
        }
        else
        {
         // tempcontdisp.heatControl(sensePin,setPoint);
        }
      }
    default:
      {
        break;
      }
    }
  }
  else if(setMode)
  {
    int timeMin = 5;
    int timeSec = 40;
    setReflowPoint(timeMin, timeSec, setPoint);
  }
  else
  {
    optionsMenu();
  }
}

void optionsMenu()
{ 
  String options[4] = {
    "Temp Select",
    "Set Reflow Pts",
    "Run Reflow",
    "Print Data"      };
  lcd_key = read_LCD_buttons();
  switch(lcd_key)
  {
  case btnDOWN:
    {
      index = index + 1;
      if(index >= optionsSize)
      {
        index = 0;
      } 
      lcd.clear();     
      break;
    }
  case btnUP:
    {
      index = index - 1;
      if(index < 0)
      {
        index = optionsSize - 1;
      }
      lcd.clear();
      break;
    }
  case btnSELECT:
    {
      if(index == 0)
      {
        setMode = true;
      }
      optionsMode = false;
      break;
    }
  case btnNONE:
    {
      lcd.setCursor(0,0);
      lcd.print("Select a Mode");
      lcd.setCursor(0,1);
      lcd.print(options[index]);
      break;
    }
  default:
    {
      break;
    }
  }
}
int read_LCD_buttons()
{
    if((millis() - lastDebounceTime) > debounceDelay)
    {
      lastDebounceTime = millis();
      int adc_key_in_new = analogRead(0);
      if(adc_key_in_new > (adc_key_in - 50) && adc_key_in_new < (adc_key_in + 50))
      {
        adc_key_in = adc_key_in_new;
        if (adc_key_in > VNONE) return btnNONE;
        else if (adc_key_in < V1) return btnRIGHT;
        else if (adc_key_in < V2) return btnUP;
        else if (adc_key_in < V3) return btnDOWN;
        else if (adc_key_in < V4) return btnLEFT;
        else if (adc_key_in < V5) return btnSELECT;
        return btnNONE; 
      }
      else
      {
        adc_key_in = adc_key_in_new;
      }
      
    }
    else
    {
      return btnNONE;
    }
}
//Need to figure out pointers in Arduino
void setReflowPoint(int initMin, int initSec, int initTemp)
{
  boolean select = true;
  int index = 0;
  int tempMin = initMin;
  int tempSec = initSec;
  int tempTemp = initTemp;
  int variables[3] = {tempMin, tempSec, tempTemp};
  int variablesSize = 3;
  int lcd_key = read_LCD_buttons();
  
  while(select)
  {
  switch (lcd_key)
  {
    case btnLEFT: //switch to previous mode
    {
      printReflowPt(variables);
      index=index-1;
      if(index < 0)
      {
        index= variablesSize - 1;
      }
      lcd.clear();
      break;
    }
    case btnRIGHT: //switch to next mode
     {  
      printReflowPt(variables); 
      index=index+1;
      if(index >= variablesSize)
      {
        index=0;
      }
      lcd.clear();
      break;
     }
       case btnUP:     //increment up
    {
        printReflowPt(variables);
        variables[index] = variables[index] + 1; 
        break;
    }
    case btnDOWN:    //increment down
    {
        printReflowPt(variables);
        variables[index] = variables[index] - 1;
        break;
    }
    case btnSELECT:  //enter and continue
    {
        printReflowPt(variables);
        select = true;
        break;
    }

    case btnNONE:    // The location where functions are executed
    {
        printReflowPt(variables);
        break;
    }
  }
  }
  //Reassigns modified values to original values
  initMin = variables[0];
  initSec = variables[1];
  initTemp = variables[2];
  
}
void printReflowPt(int[] variables)
{  
   lcd.setCursor(0,0);
   lcd.print("Time Pt 1: ");
   //Add zero to single digit of min
    if(timeMin < 10)
    {
      output.concat("0"); 
    }
    output.concat(variables[0]);
    output.concat(":");
    //Add zero to single digit of sec
    if(timeSec < 10)
    {
      output.concat("0");
    }
    output.concat(variables[1]);
    lcd.print(output);
    lcd.setCursor(0,1);
    lcd.setCursor(0,1);
    lcd.print("Temp Point 1:");
    lcd.print(variables[2])
    lcd.print(" C ");
    
}
  
